/* tslint:disable */
/* eslint-disable */
/**
 * bot_admin_service_dev
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from './configuration';
import type {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString
} from './common';
import type {RequestArgs} from './base';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequiredError} from './base';

/**
 *
 * @export
 * @interface BotUser
 */
export interface BotUser {
  /**
   *
   * @type {number}
   * @memberof BotUser
   */
  'id'?: number;
  /**
   *
   * @type {string}
   * @memberof BotUser
   */
  'first_name'?: string;
  /**
   *
   * @type {string}
   * @memberof BotUser
   */
  'last_name'?: string;
  /**
   *
   * @type {string}
   * @memberof BotUser
   */
  'username'?: string;
  /**
   *
   * @type {string}
   * @memberof BotUser
   */
  'language_code'?: string;
  /**
   *
   * @type {string}
   * @memberof BotUser
   */
  'created_at'?: string;
  /**
   *
   * @type {string}
   * @memberof BotUser
   */
  'updated_at'?: string;
}

/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  'detail'?: Array<ValidationError>;
}

/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}

/**
 *
 * @export
 * @interface Message
 */
export interface Message {
  /**
   *
   * @type {number}
   * @memberof Message
   */
  'id'?: number;
  /**
   *
   * @type {string}
   * @memberof Message
   */
  'message'?: string;
  /**
   *
   * @type {string}
   * @memberof Message
   */
  'created_at'?: string;
  /**
   *
   * @type {string}
   * @memberof Message
   */
  'updated_at'?: string;
}

/**
 *
 * @export
 * @interface Token
 */
export interface Token {
  /**
   *
   * @type {string}
   * @memberof Token
   */
  'access_token': string;
  /**
   *
   * @type {string}
   * @memberof Token
   */
  'token_type'?: string;
}

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  'is_active'?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  'is_superuser'?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  'is_verified'?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  'full_name'?: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  'telegram_id'?: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  'email'?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  'username'?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  'id'?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  'created_at'?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  'updated_at'?: string;
}

/**
 *
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
  /**
   *
   * @type {boolean}
   * @memberof UserCreate
   */
  'is_active'?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserCreate
   */
  'is_superuser'?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserCreate
   */
  'is_verified'?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  'full_name'?: string;
  /**
   *
   * @type {number}
   * @memberof UserCreate
   */
  'telegram_id'?: number;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  'email'?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  'username'?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  'password'?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  'password_confirm'?: string;
}

/**
 *
 * @export
 * @interface UserCreateOpen
 */
export interface UserCreateOpen {
  /**
   *
   * @type {string}
   * @memberof UserCreateOpen
   */
  'full_name'?: string;
  /**
   *
   * @type {number}
   * @memberof UserCreateOpen
   */
  'telegram_id'?: number;
  /**
   *
   * @type {string}
   * @memberof UserCreateOpen
   */
  'email'?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateOpen
   */
  'username'?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateOpen
   */
  'password'?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateOpen
   */
  'password_confirm'?: string;
}

/**
 *
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
  /**
   *
   * @type {boolean}
   * @memberof UserUpdate
   */
  'is_active'?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdate
   */
  'is_superuser'?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserUpdate
   */
  'is_verified'?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserUpdate
   */
  'full_name'?: string;
  /**
   *
   * @type {number}
   * @memberof UserUpdate
   */
  'telegram_id'?: number;
  /**
   *
   * @type {string}
   * @memberof UserUpdate
   */
  'email'?: string;
  /**
   *
   * @type {string}
   * @memberof UserUpdate
   */
  'username'?: string;
  /**
   *
   * @type {string}
   * @memberof UserUpdate
   */
  'password'?: string;
  /**
   *
   * @type {string}
   * @memberof UserUpdate
   */
  'password_confirm'?: string;
}

/**
 *
 * @export
 * @interface UserUpdateMe
 */
export interface UserUpdateMe {
  /**
   *
   * @type {string}
   * @memberof UserUpdateMe
   */
  'full_name'?: string;
  /**
   *
   * @type {number}
   * @memberof UserUpdateMe
   */
  'telegram_id'?: number;
}

/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<LocationInner>}
   * @memberof ValidationError
   */
  'loc': Array<LocationInner>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  'msg': string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  'type': string;
}

/**
 * EmailsApi - axios parameter creator
 * @export
 */
export const EmailsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Send Email Asynchronous
     * @param {string} subject
     * @param {string} recipients delimiter: &#x60;,&#x60;
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailAsynchronousApiV1EmailSendPost: async (subject: string, recipients: string, body: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'subject' is not null or undefined
      assertParamExists('sendEmailAsynchronousApiV1EmailSendPost', 'subject', subject)
      // verify required parameter 'recipients' is not null or undefined
      assertParamExists('sendEmailAsynchronousApiV1EmailSendPost', 'recipients', recipients)
      // verify required parameter 'body' is not null or undefined
      assertParamExists('sendEmailAsynchronousApiV1EmailSendPost', 'body', body)
      const localVarPath = `/api/v1/email/send`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

      if (subject !== undefined) {
        localVarQueryParameter['subject'] = subject;
      }

      if (recipients !== undefined) {
        localVarQueryParameter['recipients'] = recipients;
      }


      localVarHeaderParameter['Content-Type'] = 'text/base';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * EmailsApi - functional programming interface
 * @export
 */
export const EmailsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EmailsApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Send Email Asynchronous
     * @param {string} subject
     * @param {string} recipients delimiter: &#x60;,&#x60;
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendEmailAsynchronousApiV1EmailSendPost(subject: string, recipients: string, body: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmailAsynchronousApiV1EmailSendPost(subject, recipients, body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  }
};

/**
 * EmailsApi - factory interface
 * @export
 */
export const EmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = EmailsApiFp(configuration)
  return {
    /**
     *
     * @summary Send Email Asynchronous
     * @param {string} subject
     * @param {string} recipients delimiter: &#x60;,&#x60;
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendEmailAsynchronousApiV1EmailSendPost(subject: string, recipients: string, body: any, options?: any): AxiosPromise<any> {
      return localVarFp.sendEmailAsynchronousApiV1EmailSendPost(subject, recipients, body, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * EmailsApi - object-oriented interface
 * @export
 * @class EmailsApi
 * @extends {BaseAPI}
 */
export class EmailsApi extends BaseAPI {
  /**
   *
   * @summary Send Email Asynchronous
   * @param {string} subject
   * @param {string} recipients delimiter: &#x60;,&#x60;
   * @param {any} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailsApi
   */
  public sendEmailAsynchronousApiV1EmailSendPost(subject: string, recipients: string, body: any, options?: AxiosRequestConfig) {
    return EmailsApiFp(this.configuration).sendEmailAsynchronousApiV1EmailSendPost(subject, recipients, body, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Login Access Token
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginAccessTokenApiV1LoginAccessTokenPost: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('loginAccessTokenApiV1LoginAccessTokenPost', 'username', username)
      // verify required parameter 'password' is not null or undefined
      assertParamExists('loginAccessTokenApiV1LoginAccessTokenPost', 'password', password)
      const localVarPath = `/api/v1/login/access-token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();


      if (grantType !== undefined) {
        localVarFormParams.set('grant_type', grantType as any);
      }

      if (username !== undefined) {
        localVarFormParams.set('username', username as any);
      }

      if (password !== undefined) {
        localVarFormParams.set('password', password as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set('scope', scope as any);
      }

      if (clientId !== undefined) {
        localVarFormParams.set('client_id', clientId as any);
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set('client_secret', clientSecret as any);
      }


      localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Login Access Token
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = LoginApiFp(configuration)
  return {
    /**
     *
     * @summary Login Access Token
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<Token> {
      return localVarFp.loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
  /**
   *
   * @summary Login Access Token
   * @param {string} username
   * @param {string} password
   * @param {string} [grantType]
   * @param {string} [scope]
   * @param {string} [clientId]
   * @param {string} [clientSecret]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginApi
   */
  public loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig) {
    return LoginApiFp(this.configuration).loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * SignupApi - axios parameter creator
 * @export
 */
export const SignupApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Signup Client
     * @param {UserCreateOpen} userCreateOpen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupClientApiV1SignupClientPost: async (userCreateOpen: UserCreateOpen, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'userCreateOpen' is not null or undefined
      assertParamExists('signupClientApiV1SignupClientPost', 'userCreateOpen', userCreateOpen)
      const localVarPath = `/api/v1/signup/client`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      localVarRequestOptions.data = serializeDataIfNeeded(userCreateOpen, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * SignupApi - functional programming interface
 * @export
 */
export const SignupApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SignupApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Signup Client
     * @param {UserCreateOpen} userCreateOpen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signupClientApiV1SignupClientPost(userCreateOpen: UserCreateOpen, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signupClientApiV1SignupClientPost(userCreateOpen, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  }
};

/**
 * SignupApi - factory interface
 * @export
 */
export const SignupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SignupApiFp(configuration)
  return {
    /**
     *
     * @summary Signup Client
     * @param {UserCreateOpen} userCreateOpen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupClientApiV1SignupClientPost(userCreateOpen: UserCreateOpen, options?: any): AxiosPromise<object> {
      return localVarFp.signupClientApiV1SignupClientPost(userCreateOpen, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * SignupApi - object-oriented interface
 * @export
 * @class SignupApi
 * @extends {BaseAPI}
 */
export class SignupApi extends BaseAPI {
  /**
   *
   * @summary Signup Client
   * @param {UserCreateOpen} userCreateOpen
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignupApi
   */
  public signupClientApiV1SignupClientPost(userCreateOpen: UserCreateOpen, options?: AxiosRequestConfig) {
    return SignupApiFp(this.configuration).signupClientApiV1SignupClientPost(userCreateOpen, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * TelegramApi - axios parameter creator
 * @export
 */
export const TelegramApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Bot Webhook
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botWebhookApiV1Bot6216916558AAHyDAIPKLGYe1GPOuhuYFoI7IphWLu4UsPost: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('botWebhookApiV1Bot6216916558AAHyDAIPKLGYe1GPOuhuYFoI7IphWLu4UsPost', 'body', body)
      const localVarPath = `/api/v1/bot6216916558:AAHyDA_IPKLGYe1GPOuhuYFoI7IphWLu4Us`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Publish Post
     * @param {string} text
     * @param {'HTML' | 'MarkdownV2'} [parseMode]
     * @param {boolean} [disableWebPagePreview]
     * @param {boolean} [disableNotification]
     * @param {boolean} [protectContent]
     * @param {number} [delay] delay in seconds between send messages
     * @param {Array<File>} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishPostApiV1BotPostsPost: async (text: string, parseMode?: 'HTML' | 'MarkdownV2', disableWebPagePreview?: boolean, disableNotification?: boolean, protectContent?: boolean, delay?: number, file?: Array<File>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'text' is not null or undefined
      assertParamExists('publishPostApiV1BotPostsPost', 'text', text)
      const localVarPath = `/api/v1/bot/posts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

      if (parseMode !== undefined) {
        localVarQueryParameter['parse_mode'] = parseMode;
      }

      if (disableWebPagePreview !== undefined) {
        localVarQueryParameter['disable_web_page_preview'] = disableWebPagePreview;
      }

      if (disableNotification !== undefined) {
        localVarQueryParameter['disable_notification'] = disableNotification;
      }

      if (protectContent !== undefined) {
        localVarQueryParameter['protect_content'] = protectContent;
      }

      if (delay !== undefined) {
        localVarQueryParameter['delay'] = delay;
      }

      if (file) {
        file.forEach((element) => {
          localVarFormParams.append('file', element as any);
        })
      }


      if (text !== undefined) {
        localVarFormParams.append('text', text as any);
      }


      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve bot users.
     * @summary Read Bot Users
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBotUsersApiV1BotUsersGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/bot/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (range !== undefined) {
        localVarQueryParameter['range'] = range;
      }

      if (filter !== undefined) {
        localVarQueryParameter['filter'] = filter;
      }


      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve users.
     * @summary Read Messages
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMessagesApiV1BotPostsGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/bot/posts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (range !== undefined) {
        localVarQueryParameter['range'] = range;
      }

      if (filter !== undefined) {
        localVarQueryParameter['filter'] = filter;
      }


      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a specific bot user.
     * @summary Read User By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUserByIdApiV1BotUsersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('readUserByIdApiV1BotUsersIdGet', 'id', id)
      const localVarPath = `/api/v1/bot/users/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * TelegramApi - functional programming interface
 * @export
 */
export const TelegramApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TelegramApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Bot Webhook
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async botWebhookApiV1Bot6216916558AAHyDAIPKLGYe1GPOuhuYFoI7IphWLu4UsPost(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.botWebhookApiV1Bot6216916558AAHyDAIPKLGYe1GPOuhuYFoI7IphWLu4UsPost(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Publish Post
     * @param {string} text
     * @param {'HTML' | 'MarkdownV2'} [parseMode]
     * @param {boolean} [disableWebPagePreview]
     * @param {boolean} [disableNotification]
     * @param {boolean} [protectContent]
     * @param {number} [delay] delay in seconds between send messages
     * @param {Array<File>} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publishPostApiV1BotPostsPost(text: string, parseMode?: 'HTML' | 'MarkdownV2', disableWebPagePreview?: boolean, disableNotification?: boolean, protectContent?: boolean, delay?: number, file?: Array<File>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publishPostApiV1BotPostsPost(text, parseMode, disableWebPagePreview, disableNotification, protectContent, delay, file, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Retrieve bot users.
     * @summary Read Bot Users
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readBotUsersApiV1BotUsersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BotUser>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.readBotUsersApiV1BotUsersGet(sort, range, filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Retrieve users.
     * @summary Read Messages
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readMessagesApiV1BotPostsGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.readMessagesApiV1BotPostsGet(sort, range, filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Get a specific bot user.
     * @summary Read User By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readUserByIdApiV1BotUsersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.readUserByIdApiV1BotUsersIdGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  }
};

/**
 * TelegramApi - factory interface
 * @export
 */
export const TelegramApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TelegramApiFp(configuration)
  return {
    /**
     *
     * @summary Bot Webhook
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botWebhookApiV1Bot6216916558AAHyDAIPKLGYe1GPOuhuYFoI7IphWLu4UsPost(body: object, options?: any): AxiosPromise<any> {
      return localVarFp.botWebhookApiV1Bot6216916558AAHyDAIPKLGYe1GPOuhuYFoI7IphWLu4UsPost(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Publish Post
     * @param {string} text
     * @param {'HTML' | 'MarkdownV2'} [parseMode]
     * @param {boolean} [disableWebPagePreview]
     * @param {boolean} [disableNotification]
     * @param {boolean} [protectContent]
     * @param {number} [delay] delay in seconds between send messages
     * @param {Array<File>} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishPostApiV1BotPostsPost(text: string, parseMode?: 'HTML' | 'MarkdownV2', disableWebPagePreview?: boolean, disableNotification?: boolean, protectContent?: boolean, delay?: number, file?: Array<File>, options?: any): AxiosPromise<any> {
      return localVarFp.publishPostApiV1BotPostsPost(text, parseMode, disableWebPagePreview, disableNotification, protectContent, delay, file, options).then((request) => request(axios, basePath));
    },
    /**
     * Retrieve bot users.
     * @summary Read Bot Users
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBotUsersApiV1BotUsersGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<BotUser>> {
      return localVarFp.readBotUsersApiV1BotUsersGet(sort, range, filter, options).then((request) => request(axios, basePath));
    },
    /**
     * Retrieve users.
     * @summary Read Messages
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMessagesApiV1BotPostsGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<Message>> {
      return localVarFp.readMessagesApiV1BotPostsGet(sort, range, filter, options).then((request) => request(axios, basePath));
    },
    /**
     * Get a specific bot user.
     * @summary Read User By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUserByIdApiV1BotUsersIdGet(id: number, options?: any): AxiosPromise<User> {
      return localVarFp.readUserByIdApiV1BotUsersIdGet(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * TelegramApi - object-oriented interface
 * @export
 * @class TelegramApi
 * @extends {BaseAPI}
 */
export class TelegramApi extends BaseAPI {
  /**
   *
   * @summary Bot Webhook
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelegramApi
   */
  public botWebhookApiV1Bot6216916558AAHyDAIPKLGYe1GPOuhuYFoI7IphWLu4UsPost(body: object, options?: AxiosRequestConfig) {
    return TelegramApiFp(this.configuration).botWebhookApiV1Bot6216916558AAHyDAIPKLGYe1GPOuhuYFoI7IphWLu4UsPost(body, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Publish Post
   * @param {string} text
   * @param {'HTML' | 'MarkdownV2'} [parseMode]
   * @param {boolean} [disableWebPagePreview]
   * @param {boolean} [disableNotification]
   * @param {boolean} [protectContent]
   * @param {number} [delay] delay in seconds between send messages
   * @param {Array<File>} [file]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelegramApi
   */
  public publishPostApiV1BotPostsPost(text: string, parseMode?: 'HTML' | 'MarkdownV2', disableWebPagePreview?: boolean, disableNotification?: boolean, protectContent?: boolean, delay?: number, file?: Array<File>, options?: AxiosRequestConfig) {
    return TelegramApiFp(this.configuration).publishPostApiV1BotPostsPost(text, parseMode, disableWebPagePreview, disableNotification, protectContent, delay, file, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve bot users.
   * @summary Read Bot Users
   * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
   * @param {string} [range] Format: &#x60;[start, end]&#x60;
   * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelegramApi
   */
  public readBotUsersApiV1BotUsersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
    return TelegramApiFp(this.configuration).readBotUsersApiV1BotUsersGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve users.
   * @summary Read Messages
   * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
   * @param {string} [range] Format: &#x60;[start, end]&#x60;
   * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelegramApi
   */
  public readMessagesApiV1BotPostsGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
    return TelegramApiFp(this.configuration).readMessagesApiV1BotPostsGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a specific bot user.
   * @summary Read User By Id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelegramApi
   */
  public readUserByIdApiV1BotUsersIdGet(id: number, options?: AxiosRequestConfig) {
    return TelegramApiFp(this.configuration).readUserByIdApiV1BotUsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create new user.
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserApiV1UsersPost: async (userCreate: UserCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'userCreate' is not null or undefined
      assertParamExists('createUserApiV1UsersPost', 'userCreate', userCreate)
      const localVarPath = `/api/v1/users/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete user
     * @summary Delete User
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserApiV1UsersIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteUserApiV1UsersIdDelete', 'id', id)
      const localVarPath = `/api/v1/users/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get a specific user.
     * @summary Read User By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUserByIdApiV1UsersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('readUserByIdApiV1UsersIdGet', 'id', id)
      const localVarPath = `/api/v1/users/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get current user.
     * @summary Read User Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUserMeApiV1UsersMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve users.
     * @summary Read Users
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUsersApiV1UsersGet: async (sort?: string, range?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (range !== undefined) {
        localVarQueryParameter['range'] = range;
      }

      if (filter !== undefined) {
        localVarQueryParameter['filter'] = filter;
      }


      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update a user.
     * @summary Update User
     * @param {number} id
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserApiV1UsersIdPut: async (id: number, userUpdate: UserUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateUserApiV1UsersIdPut', 'id', id)
      // verify required parameter 'userUpdate' is not null or undefined
      assertParamExists('updateUserApiV1UsersIdPut', 'userUpdate', userUpdate)
      const localVarPath = `/api/v1/users/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update own user.
     * @summary Update User Me
     * @param {UserUpdateMe} userUpdateMe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserMeApiV1UsersMePut: async (userUpdateMe: UserUpdateMe, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'userUpdateMe' is not null or undefined
      assertParamExists('updateUserMeApiV1UsersMePut', 'userUpdateMe', userUpdateMe)
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      localVarRequestOptions.data = serializeDataIfNeeded(userUpdateMe, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
  return {
    /**
     * Create new user.
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserApiV1UsersPost(userCreate: UserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserApiV1UsersPost(userCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Delete user
     * @summary Delete User
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserApiV1UsersIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserApiV1UsersIdDelete(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Get a specific user.
     * @summary Read User By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readUserByIdApiV1UsersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.readUserByIdApiV1UsersIdGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Get current user.
     * @summary Read User Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readUserMeApiV1UsersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.readUserMeApiV1UsersMeGet(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Retrieve users.
     * @summary Read Users
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readUsersApiV1UsersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersApiV1UsersGet(sort, range, filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Update a user.
     * @summary Update User
     * @param {number} id
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserApiV1UsersIdPut(id: number, userUpdate: UserUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserApiV1UsersIdPut(id, userUpdate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Update own user.
     * @summary Update User Me
     * @param {UserUpdateMe} userUpdateMe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserMeApiV1UsersMePut(userUpdateMe: UserUpdateMe, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserMeApiV1UsersMePut(userUpdateMe, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UsersApiFp(configuration)
  return {
    /**
     * Create new user.
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserApiV1UsersPost(userCreate: UserCreate, options?: any): AxiosPromise<User> {
      return localVarFp.createUserApiV1UsersPost(userCreate, options).then((request) => request(axios, basePath));
    },
    /**
     * Delete user
     * @summary Delete User
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserApiV1UsersIdDelete(id: number, options?: any): AxiosPromise<User> {
      return localVarFp.deleteUserApiV1UsersIdDelete(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Get a specific user.
     * @summary Read User By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUserByIdApiV1UsersIdGet(id: number, options?: any): AxiosPromise<User> {
      return localVarFp.readUserByIdApiV1UsersIdGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Get current user.
     * @summary Read User Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUserMeApiV1UsersMeGet(options?: any): AxiosPromise<User> {
      return localVarFp.readUserMeApiV1UsersMeGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Retrieve users.
     * @summary Read Users
     * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @param {string} [range] Format: &#x60;[start, end]&#x60;
     * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUsersApiV1UsersGet(sort?: string, range?: string, filter?: string, options?: any): AxiosPromise<Array<User>> {
      return localVarFp.readUsersApiV1UsersGet(sort, range, filter, options).then((request) => request(axios, basePath));
    },
    /**
     * Update a user.
     * @summary Update User
     * @param {number} id
     * @param {UserUpdate} userUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserApiV1UsersIdPut(id: number, userUpdate: UserUpdate, options?: any): AxiosPromise<User> {
      return localVarFp.updateUserApiV1UsersIdPut(id, userUpdate, options).then((request) => request(axios, basePath));
    },
    /**
     * Update own user.
     * @summary Update User Me
     * @param {UserUpdateMe} userUpdateMe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserMeApiV1UsersMePut(userUpdateMe: UserUpdateMe, options?: any): AxiosPromise<User> {
      return localVarFp.updateUserMeApiV1UsersMePut(userUpdateMe, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * Create new user.
   * @summary Create User
   * @param {UserCreate} userCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public createUserApiV1UsersPost(userCreate: UserCreate, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration).createUserApiV1UsersPost(userCreate, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete user
   * @summary Delete User
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public deleteUserApiV1UsersIdDelete(id: number, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration).deleteUserApiV1UsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get a specific user.
   * @summary Read User By Id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public readUserByIdApiV1UsersIdGet(id: number, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration).readUserByIdApiV1UsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get current user.
   * @summary Read User Me
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public readUserMeApiV1UsersMeGet(options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration).readUserMeApiV1UsersMeGet(options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve users.
   * @summary Read Users
   * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
   * @param {string} [range] Format: &#x60;[start, end]&#x60;
   * @param {string} [filter] Format: &#x60;{\&quot;field_name\&quot;: \&quot;value\&quot;}&#x60;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public readUsersApiV1UsersGet(sort?: string, range?: string, filter?: string, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration).readUsersApiV1UsersGet(sort, range, filter, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update a user.
   * @summary Update User
   * @param {number} id
   * @param {UserUpdate} userUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUserApiV1UsersIdPut(id: number, userUpdate: UserUpdate, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration).updateUserApiV1UsersIdPut(id, userUpdate, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update own user.
   * @summary Update User Me
   * @param {UserUpdateMe} userUpdateMe
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUserMeApiV1UsersMePut(userUpdateMe: UserUpdateMe, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration).updateUserMeApiV1UsersMePut(userUpdateMe, options).then((request) => request(this.axios, this.basePath));
  }
}


/**
 * VerifyApi - axios parameter creator
 * @export
 */
export const VerifyApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Verify Me
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyMeApiV1VerifyEmailTokenGet: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'token' is not null or undefined
      assertParamExists('verifyMeApiV1VerifyEmailTokenGet', 'token', token)
      const localVarPath = `/api/v1/verify/email/{token}`
        .replace(`{${"token"}}`, encodeURIComponent(String(token)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * VerifyApi - functional programming interface
 * @export
 */
export const VerifyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VerifyApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Verify Me
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async verifyMeApiV1VerifyEmailTokenGet(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.verifyMeApiV1VerifyEmailTokenGet(token, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  }
};

/**
 * VerifyApi - factory interface
 * @export
 */
export const VerifyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = VerifyApiFp(configuration)
  return {
    /**
     *
     * @summary Verify Me
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyMeApiV1VerifyEmailTokenGet(token: string, options?: any): AxiosPromise<any> {
      return localVarFp.verifyMeApiV1VerifyEmailTokenGet(token, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * VerifyApi - object-oriented interface
 * @export
 * @class VerifyApi
 * @extends {BaseAPI}
 */
export class VerifyApi extends BaseAPI {
  /**
   *
   * @summary Verify Me
   * @param {string} token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VerifyApi
   */
  public verifyMeApiV1VerifyEmailTokenGet(token: string, options?: AxiosRequestConfig) {
    return VerifyApiFp(this.configuration).verifyMeApiV1VerifyEmailTokenGet(token, options).then((request) => request(this.axios, this.basePath));
  }
}


